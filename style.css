*{
    box-sizing: border-box;
}
/* Starting with the `*` (universal selector) element we will apply the `box-sizing` property, so that *all* elements inherit it. This is something I would recommend adding to all of your projects. */
/* > If you set box-sizing: border-box; on an element, the padding and border are included in the width and height. */

html, body {
    height: 100%;
  }
  /* For this code pen example we will set the `html` and `body` elements to `height: 100%;`. 
  This is required for future use of `position: 
  absolute;` that we will be adding to the `footer`. This is so that it
   will stick to the bottom of the browser window. As both elements 
   share the same rule of `height: 100%;` we group the 
   selectors together separated by a comma. (edited)  */

   body {
    margin: 0;
    font-family: 'Roboto', sans-serif;
    color: black;
    background-color: #093145;
  }

  /* For the `body` element we remove the `margin` that browsers add by default,
   by setting it to `0`. Then set our default typography rules for the page 
   by utilizing the Google Font Roboto that we previously imported in the head
    of the index.html. We also set the default font color and add 
    a background color. */

    ul {
        list-style: none;
        padding-left: 0;
      }
      /* For the `ul` we remove the default bullet points by setting `list-style` 
      to `none` and the default list left indentation that is added as left 
      padding by the browser, by setting it to `0`.  This is something 
      I would recommend adding to every project that uses a list. */

      a {
        text-decoration: none;
        color: white;
        text-transform: uppercase;
        line-height: 1.38em;
      }
      /* Lastly on the `a` element we remove the default underline that 
      the browsers apply to links, set the text to appear in all caps to 
      match the mockups, set the color to white, and normalize the 
      line-height for cross browser uniformity. */

      footer {
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 100px;
        padding: 20px;
        background-color: #107896;
      }

      /* Next, we add the rules for the `footer` element. First we set 
      `position: absolute` and `bottom: 0;` to stick the footer to the bottom 
      of the page, for this code pen example. By default when using
       `position: absolute;` the width is set to that of the content. 
       So we also add `width: 100%;` here so that the footer spans 
       the full width of the page. Then we set we give it a fixed height,
        background color, and padding for general styling purposes. */

        h2 {
            float: left;
            height: 12px;
            line-height: 12px;
          }
          
          .footer-nav {
            text-align: right;
          }
          
          li {
            display: inline-block;
            margin-right: 20px;
          }
/* Next we will setup the rules to layout the `h2` and `ul` nav items
onto the same line. As the `<h2>` appears before the 
`<ul class="footer-nav">` in the HTML, we will want to float it to
the left so that the `ul` can move up to the same row as it. 
Next we set the `height` and `line-height` to equal pixel values 
to vertically align them within the `footer` element. 
Next we set `text-align: right;` on the `ul` so that the navigation 
items move to the right hand side of the browser. Finally, 
we set the `li` to `display: inline-block;` so that the navigation 
items go into a row format instead of the default column format. 
Then, add `margin-right: 20px` to separate the navigation items. */

            .top, .footer-nav li:last-child {
                margin-right: 0;
              }

/* So that the last item in the full navigation and the solo
“back to top” link sit flush against the right hand side of the 
footer element, we remove the `margin-right` from those two
items that we added previously. The selector `li:last-child` 
targets the last `li` element inside `footer-nav` unordered list */

                .full {
                    display: none;
                  }

/* The last piece of our `mobile-first` (for screen sizes `767px` 
and below) code is to hide the *full* navigation menu on 
the *mobile view*. This is achieved by setting it to 
`display: none;`. */

                  @media (min-width: 768px) {
                    .top {
                      display: none;
                    }
                    .full {
                      display: inline-block;
                    }
                  }
                  
/* To finish things off we build out the `min-width: 768px`
media query. First we hide *“back to top”* so it does not 
appear on screen sizes 768px and above.  Then we display the 
full navigation instead. (edited)  */